#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include "structure.h"
#include "save.h"
#include "tools.h"
// FONCTIONS DE GESTION DES TAGS

taglist init_new_tag(char* name_of_tag)
{
    taglist new_tag = malloc(sizeof(nodetag));

    new_tag->word=name_of_tag;

    new_tag->next=NULL;

    return new_tag;
}

taglist add_tag(taglist t,char* name_of_tag)
{
    if (t==NULL)
        return NULL;

    while (t->next)
        t=t->next;

    return (t->next = init_new_tag(name_of_tag));
}

// FONCTION DE GESTION DE L'ARBRE

tree creat_tree_save(tree a, char **info, int info_x, int info_y, int pos_x)
{
    int i;
    int pos_y=0;
    int size_element;


    a = malloc(sizeof(tree));
    while(info[pos_x][pos_y] != '*')
    {
        pos_y = pos_y + 1;
    }
    pos_y++;
    size_element = 0;

    for(i=pos_y; info[pos_x][i] != '*'; i++)
    {
        size_element++;
    }
printf("test");
    a->word = malloc_tad1D(size_element);
printf("test");
    for(i=0; info[pos_x][i+pos_y] != '*'; i++)
    {
        a->word[i] = info[pos_x][i+pos_y];
    }
    a->word[i+1] = '\0';
    pos_y = pos_y + i + 1;

    a->type = atoi(&info[pos_x][pos_y]);

    if (a->type == 0)
    {
        pos_y = pos_y + 2;

        char *tag=NULL;
        int tag_init = 0; //Pour savoir si les tags on déjà était initialisé
        while(info[pos_x][pos_y] != '\n')
        {
            size_element = 0;
            i=0;

            while(info[pos_x][i+pos_y] != '-' && info[pos_x][i+pos_y] != '*')
            {
                size_element++;
                i++;
            }

            tag = malloc_tad1D(size_element);

            i=0;
            while(info[pos_x][i+pos_y] != '-' && info[pos_x][i+pos_y] != '*')
            {
                tag[i] = info[pos_x][i+pos_y];
                i++;
            }
            tag[i+1] = '\0';

            /*if (tag_init == 0)
            {
                a->nexttag=init_new_tag(tag);
                tag_init = 1;
            }
            else
            {
                add_tag(a->nexttag, tag);
            }*/

            pos_y = pos_y + i + 1;

            free(tag);
        }
    }
    return a;
}

tree init_tree_save()
{
    FILE* fichier = NULL;
    fichier = fopen("arbre.txt","r");
    int **tab_id = NULL;
    char **tab_tree;
    tab_id = tabId();
    tab_tree = tabTree();


    if (fichier != NULL && tab_id != NULL && tab_tree != NULL)
    {
        int size_id_x, size_id_y, size_tree_x, size_tree_y;
        sizeId(&size_id_x, &size_id_y);
        sizeFile(&size_tree_x, &size_tree_y);

        tree a = NULL;

        if (tab_id[0][0] == 0)
        {
            printf("deb");
            creat_tree_save(a,tab_tree,size_tree_x,size_tree_y,0);
            printf("fin");
            print_tree(a,0);
        }
    }
    else
    {
        printf("L'un des tableaux n'a pas était généré");
    }

    return NULL;
}

tree init_new_tree(char* name_of_tree, int typechoice,tree father)
{
    tree new_tree = malloc(sizeof(node));

    if (new_tree)
    {
        new_tree->next=NULL;
        new_tree->child=NULL;
        new_tree->father=father;
        new_tree->type=typechoice; // Donne l'information que c'est un fichier (tant qu'il n'a pas de childs)
        new_tree->word=name_of_tree;
        new_tree->nexttag=NULL; // A l'initialisation, pas de tags
        new_tree->nextId=NULL;
    }

    return new_tree;
}

tree add_next(tree n,char* node_name,int typechoice)
{
    if (n==NULL)
        return NULL;

    while (n->next)
        n=n->next;

    return (n->next = init_new_tree(node_name,typechoice,n)); // On envoie en paramètre l'adresse du père
}

tree add_child(tree n,char* node_name,int typechoice)
{
    n->type=0; /// Ici on donne l'information qu'il s'agit d'un dossier

    if (n==NULL)
        return NULL;

    if (n->child)
        return add_next(n->child,node_name,typechoice);

    else
        return (n->child = init_new_tree(node_name,typechoice,n)); // On envoie en paramètre l'adresse du père
}



